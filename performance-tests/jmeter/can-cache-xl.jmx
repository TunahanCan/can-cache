<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Can Cache Extra Large Load" enabled="true">
      <stringProp name="TestPlan.comments">Saturation and capacity planning profile</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="targetHost" elementType="Argument">
            <stringProp name="Argument.name">targetHost</stringProp>
            <stringProp name="Argument.value">${__P(targetHost,127.0.0.1)}</stringProp>
            <stringProp name="Argument.desc">Hostname of the Can Cache node</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="targetPort" elementType="Argument">
            <stringProp name="Argument.name">targetPort</stringProp>
            <stringProp name="Argument.value">${__P(targetPort,11211)}</stringProp>
            <stringProp name="Argument.desc">Memcached TCP port</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ttlSeconds" elementType="Argument">
            <stringProp name="Argument.name">ttlSeconds</stringProp>
            <stringProp name="Argument.value">${__P(ttlSeconds,60)}</stringProp>
            <stringProp name="Argument.desc">TTL assigned to SET</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="connectTimeoutMillis" elementType="Argument">
            <stringProp name="Argument.name">connectTimeoutMillis</stringProp>
            <stringProp name="Argument.value">${__P(connectTimeoutMillis,1500)}</stringProp>
            <stringProp name="Argument.desc">Socket connect timeout</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="readTimeoutMillis" elementType="Argument">
            <stringProp name="Argument.name">readTimeoutMillis</stringProp>
            <stringProp name="Argument.value">${__P(readTimeoutMillis,4000)}</stringProp>
            <stringProp name="Argument.desc">Socket read timeout</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="keyPrefix" elementType="Argument">
            <stringProp name="Argument.name">keyPrefix</stringProp>
            <stringProp name="Argument.value">${__P(keyPrefix,perf-)}</stringProp>
            <stringProp name="Argument.desc">Prefix for generated keys</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="payloadSize" elementType="Argument">
            <stringProp name="Argument.name">payloadSize</stringProp>
            <stringProp name="Argument.value">${__P(payloadSize,512)}</stringProp>
            <stringProp name="Argument.desc">Payload size in bytes</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="durationSeconds" elementType="Argument">
            <stringProp name="Argument.name">durationSeconds</stringProp>
            <stringProp name="Argument.value">${__P(durationSeconds,900)}</stringProp>
            <stringProp name="Argument.desc">Thread group duration</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="resultFile" elementType="Argument">
            <stringProp name="Argument.name">resultFile</stringProp>
            <stringProp name="Argument.value">${__P(resultFile,results/can-cache-xl.jtl)}</stringProp>
            <stringProp name="Argument.desc">Results output path</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"/>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Extra Large Load Threads" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loops" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">-1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">100</stringProp>
        <stringProp name="ThreadGroup.ramp_time">90</stringProp>
        <longProp name="ThreadGroup.start_time">0</longProp>
        <longProp name="ThreadGroup.end_time">0</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${durationSeconds}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Memcached Round Trip" enabled="true">
          <stringProp name="cacheKey">groovy-memcached-roundtrip</stringProp>
          <stringProp name="filename"/>
          <stringProp name="parameters"/>
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="script"><![CDATA[import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.IOException
import java.io.InputStreamReader
import java.io.OutputStreamWriter
import java.io.PrintWriter
import java.io.StringWriter
import java.net.InetSocketAddress
import java.net.Socket
import java.util.UUID

def host = vars.get("targetHost")
int port = (vars.get("targetPort") ?: "11211") as int
int ttl = (vars.get("ttlSeconds") ?: "60") as int
int payloadSize = (vars.get("payloadSize") ?: "512") as int
int connectTimeout = (vars.get("connectTimeoutMillis") ?: "1500") as int
int readTimeout = (vars.get("readTimeoutMillis") ?: "4000") as int
def keyPrefix = vars.get("keyPrefix") ?: "perf-"

Socket socket
BufferedWriter writer
BufferedReader reader

SampleResult.sampleStart()
try {
    socket = new Socket()
    socket.connect(new InetSocketAddress(host, port), connectTimeout)
    socket.soTimeout = readTimeout
    socket.tcpNoDelay = true

    writer = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream(), "UTF-8"))
    reader = new BufferedReader(new InputStreamReader(socket.getInputStream(), "UTF-8"))

    def random = UUID.randomUUID().toString().replace("-", "")
    int repeat = Math.max(1, (int) Math.ceil(payloadSize / (double) random.length()))
    def payloadSource = random * repeat
    def payload = payloadSource.substring(0, payloadSize)
    byte[] payloadBytes = payload.getBytes("UTF-8")
    def key = keyPrefix + random.substring(0, Math.min(16, random.length()))

    writer.write("set ${key} 0 ${ttl} ${payloadBytes.length}\\r\\n")
    writer.write(payload)
    writer.write("\\r\\n")
    writer.flush()

    def setResp = reader.readLine()
    if (!"STORED".equals(setResp)) {
        throw new IOException("SET failed with response: ${setResp}")
    }

    writer.write("get ${key}\\r\\n")
    writer.flush()

    def header = reader.readLine()
    if (header == null || !header.startsWith("VALUE")) {
        throw new IOException("Unexpected GET header: ${header}")
    }

    def returned = reader.readLine()
    def trailer = reader.readLine()
    if (!payload.equals(returned)) {
        throw new IOException("Returned payload mismatch (${returned?.length()} vs expected ${payload.length()})")
    }
    if (!"END".equals(trailer)) {
        throw new IOException("Missing END after GET, received: ${trailer}")
    }

    writer.write("delete ${key}\\r\\n")
    writer.flush()
    def deleteResp = reader.readLine()
    if (deleteResp == null || !(deleteResp.equals("DELETED") || deleteResp.equals("NOT_FOUND"))) {
        throw new IOException("DELETE failed with response: ${deleteResp}")
    }

    SampleResult.setResponseCodeOK()
    SampleResult.setResponseMessage("Round trip succeeded")
    SampleResult.setResponseData(("SET:${setResp};GET:${header};DEL:${deleteResp}").getBytes("UTF-8"))
    SampleResult.setSuccessful(true)
} catch (Exception ex) {
    log.error("Memcached round trip failed", ex)
    SampleResult.setSuccessful(false)
    SampleResult.setResponseCode("500")
    SampleResult.setResponseMessage(ex.getMessage())
    def sw = new StringWriter()
    ex.printStackTrace(new PrintWriter(sw))
    SampleResult.setResponseData(sw.toString(), "UTF-8")
} finally {
    SampleResult.sampleEnd()
    try {
        writer?.close()
    } catch (Exception ignore) {}
    try {
        reader?.close()
    } catch (Exception ignore) {}
    try {
        socket?.close()
    } catch (Exception ignore) {}
}
]]></stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time" enabled="true">
          <stringProp name="ConstantTimer.delay">25</stringProp>
        </ConstantTimer>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">${resultFile}</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
