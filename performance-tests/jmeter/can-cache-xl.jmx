<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Can Cache Extra Large Load" enabled="true">
      <stringProp name="TestPlan.comments">Saturation and capacity planning profile</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="targetHost" elementType="Argument">
            <stringProp name="Argument.name">targetHost</stringProp>
            <stringProp name="Argument.value">${__P(targetHost,127.0.0.1)}</stringProp>
            <stringProp name="Argument.desc">Hostname of the Can Cache node</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="targetPort" elementType="Argument">
            <stringProp name="Argument.name">targetPort</stringProp>
            <stringProp name="Argument.value">${__P(targetPort,11211)}</stringProp>
            <stringProp name="Argument.desc">cancached TCP port</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ttlSeconds" elementType="Argument">
            <stringProp name="Argument.name">ttlSeconds</stringProp>
            <stringProp name="Argument.value">${__P(ttlSeconds,60)}</stringProp>
            <stringProp name="Argument.desc">TTL assigned to SET</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="connectTimeoutMillis" elementType="Argument">
            <stringProp name="Argument.name">connectTimeoutMillis</stringProp>
            <stringProp name="Argument.value">${__P(connectTimeoutMillis,1500)}</stringProp>
            <stringProp name="Argument.desc">Socket connect timeout</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="readTimeoutMillis" elementType="Argument">
            <stringProp name="Argument.name">readTimeoutMillis</stringProp>
            <stringProp name="Argument.value">${__P(readTimeoutMillis,4000)}</stringProp>
            <stringProp name="Argument.desc">Socket read timeout</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="keyPrefix" elementType="Argument">
            <stringProp name="Argument.name">keyPrefix</stringProp>
            <stringProp name="Argument.value">${__P(keyPrefix,perf-)}</stringProp>
            <stringProp name="Argument.desc">Prefix for generated keys</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="payloadSize" elementType="Argument">
            <stringProp name="Argument.name">payloadSize</stringProp>
            <stringProp name="Argument.value">${__P(payloadSize,512)}</stringProp>
            <stringProp name="Argument.desc">Payload size in bytes</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="durationSeconds" elementType="Argument">
            <stringProp name="Argument.name">durationSeconds</stringProp>
            <stringProp name="Argument.value">${__P(durationSeconds,900)}</stringProp>
            <stringProp name="Argument.desc">Thread group duration</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="resultFile" elementType="Argument">
            <stringProp name="Argument.name">resultFile</stringProp>
            <stringProp name="Argument.value">${__P(resultFile,results/can-cache-xl.jtl)}</stringProp>
            <stringProp name="Argument.desc">Results output path</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"/>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Extra Large Load Threads" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loops" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">-1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">100</stringProp>
        <stringProp name="ThreadGroup.ramp_time">90</stringProp>
        <longProp name="ThreadGroup.start_time">0</longProp>
        <longProp name="ThreadGroup.end_time">0</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${durationSeconds}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="cancached Round Trip" enabled="true">
          <stringProp name="classname">com.can.cache.perf.CancachedRoundTripSampler</stringProp>
          <elementProp name="arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="targetHost" elementType="Argument">
                <stringProp name="Argument.name">targetHost</stringProp>
                <stringProp name="Argument.value">${targetHost}</stringProp>
                <stringProp name="Argument.desc">Hostname of the Can Cache node</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="targetPort" elementType="Argument">
                <stringProp name="Argument.name">targetPort</stringProp>
                <stringProp name="Argument.value">${targetPort}</stringProp>
                <stringProp name="Argument.desc">cancached TCP port</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ttlSeconds" elementType="Argument">
                <stringProp name="Argument.name">ttlSeconds</stringProp>
                <stringProp name="Argument.value">${ttlSeconds}</stringProp>
                <stringProp name="Argument.desc">TTL assigned to SET</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="connectTimeoutMillis" elementType="Argument">
                <stringProp name="Argument.name">connectTimeoutMillis</stringProp>
                <stringProp name="Argument.value">${connectTimeoutMillis}</stringProp>
                <stringProp name="Argument.desc">Socket connect timeout</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="readTimeoutMillis" elementType="Argument">
                <stringProp name="Argument.name">readTimeoutMillis</stringProp>
                <stringProp name="Argument.value">${readTimeoutMillis}</stringProp>
                <stringProp name="Argument.desc">Socket read timeout</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="keyPrefix" elementType="Argument">
                <stringProp name="Argument.name">keyPrefix</stringProp>
                <stringProp name="Argument.value">${keyPrefix}</stringProp>
                <stringProp name="Argument.desc">Prefix used for generated cache keys</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="payloadSize" elementType="Argument">
                <stringProp name="Argument.name">payloadSize</stringProp>
                <stringProp name="Argument.value">${payloadSize}</stringProp>
                <stringProp name="Argument.desc">Payload size in bytes</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </JavaSampler>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time" enabled="true">
          <stringProp name="ConstantTimer.delay">25</stringProp>
        </ConstantTimer>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">${resultFile}</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
