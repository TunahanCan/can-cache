<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 960 540" role="img" aria-labelledby="title desc">
  <title id="title">can-cache Çift Node Veri Yolculuğu</title>
  <desc id="desc">İki node'lu can-cache kümesinde bir yazma isteğinin keşiften quorum'a kadar izlediği yolun animasyonu.</desc>
  <defs>
    <linearGradient id="bg" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stop-color="#0f172a" />
      <stop offset="100%" stop-color="#1e293b" />
    </linearGradient>
    <linearGradient id="node" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stop-color="#38bdf8" stop-opacity="0.9" />
      <stop offset="100%" stop-color="#0ea5e9" stop-opacity="0.9" />
    </linearGradient>
    <linearGradient id="client" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stop-color="#facc15" />
      <stop offset="100%" stop-color="#f97316" />
    </linearGradient>
    <marker id="arrow" markerWidth="12" markerHeight="12" refX="10" refY="6" orient="auto" markerUnits="userSpaceOnUse">
      <path d="M0,0 L12,6 L0,12 Z" fill="#f8fafc" />
    </marker>
    <style>
      text { font-family: 'Segoe UI', 'Helvetica Neue', Arial, sans-serif; fill: #e2e8f0; }
      .title { font-size: 28px; font-weight: 600; letter-spacing: 0.02em; }
      .subtitle { font-size: 16px; fill: #cbd5f5; }
      .node-label { font-size: 15px; font-weight: 600; }
      .step text { font-size: 14px; }
      .step-title { font-size: 16px; font-weight: 600; }
      .step-desc { font-size: 13px; fill: #cbd5f5; }
      .step { opacity: 0.26; transform-origin: 120px 44px; }
      @keyframes spotlight {
        0%, 6% { opacity: 0.26; transform: scale(1) translateY(0); }
        10%, 16% { opacity: 0.92; transform: scale(1.05) translateY(-2px); }
        20%, 100% { opacity: 0.28; transform: scale(1) translateY(0); }
      }
      .step1 { animation: spotlight 24s ease-in-out infinite; animation-delay: 0s; }
      .step2 { animation: spotlight 24s ease-in-out infinite; animation-delay: 3s; }
      .step3 { animation: spotlight 24s ease-in-out infinite; animation-delay: 6s; }
      .step4 { animation: spotlight 24s ease-in-out infinite; animation-delay: 9s; }
      .step5 { animation: spotlight 24s ease-in-out infinite; animation-delay: 12s; }
      .step6 { animation: spotlight 24s ease-in-out infinite; animation-delay: 15s; }
      .step7 { animation: spotlight 24s ease-in-out infinite; animation-delay: 18s; }
      .step8 { animation: spotlight 24s ease-in-out infinite; animation-delay: 21s; }
      @keyframes heartbeat {
        0%, 20%, 100% { r: 18; }
        10% { r: 22; }
      }
      .node-pulse { animation: heartbeat 3s ease-in-out infinite; }
      .node { filter: drop-shadow(0 0 0 rgba(56,189,248,0)); transition: filter 0.4s ease; }
      .node-a { animation: nodeAFocus 24s ease-in-out infinite; }
      .node-b { animation: nodeBFocus 24s ease-in-out infinite; }
      @keyframes nodeAFocus {
        0%, 22% { filter: drop-shadow(0 0 0 rgba(56,189,248,0)); }
        25%, 62% { filter: drop-shadow(0 0 16px rgba(56,189,248,0.55)); }
        65%, 100% { filter: drop-shadow(0 0 0 rgba(56,189,248,0)); }
      }
      @keyframes nodeBFocus {
        0%, 6% { filter: drop-shadow(0 0 14px rgba(45,212,191,0.55)); }
        10%, 42% { filter: drop-shadow(0 0 0 rgba(45,212,191,0)); }
        46%, 78% { filter: drop-shadow(0 0 18px rgba(45,212,191,0.65)); }
        82%, 100% { filter: drop-shadow(0 0 0 rgba(45,212,191,0)); }
      }
      .node circle { transform-box: fill-box; transform-origin: center; stroke-width: 3; }
      .node-a circle { stroke: rgba(56,189,248,0.6); animation: nodeACircle 24s ease-in-out infinite; }
      .node-b circle { stroke: rgba(45,212,191,0.5); animation: nodeBCircle 24s ease-in-out infinite; }
      @keyframes nodeACircle {
        0%, 22% { transform: scale(1); stroke-opacity: 0.1; }
        25%, 62% { transform: scale(1.08); stroke-opacity: 1; }
        65%, 100% { transform: scale(1); stroke-opacity: 0.1; }
      }
      @keyframes nodeBCircle {
        0%, 6% { transform: scale(1.06); stroke-opacity: 0.9; }
        10%, 42% { transform: scale(1); stroke-opacity: 0.15; }
        46%, 78% { transform: scale(1.08); stroke-opacity: 0.95; }
        82%, 100% { transform: scale(1); stroke-opacity: 0.15; }
      }
      @keyframes orbit {
        0%, 20% { offset-distance: 0%; opacity: 0; }
        24% { opacity: 1; }
        36% { offset-distance: 36%; }
        60% { offset-distance: 60%; }
        78% { offset-distance: 84%; }
        84%, 94% { offset-distance: 100%; opacity: 1; }
        100% { offset-distance: 100%; opacity: 0; }
      }
      .packet { offset-path: path('M150 170 C 300 100 380 100 520 170 S 740 240 840 170'); offset-rotate: 0deg; animation: orbit 24s ease-in-out infinite; animation-delay: 6s; }
      .packet circle { fill: #facc15; stroke: #fde68a; stroke-width: 3; filter: drop-shadow(0 0 8px rgba(250,204,21,0.6)); }
      .flow { fill: none; stroke-linecap: round; stroke-dasharray: 14 16; stroke-width: 4; opacity: 0.2; animation: flowDash 24s ease-in-out infinite; }
      .flow-client { stroke: #38bdf8; animation-delay: 6s; }
      .flow-replica { stroke: #5eead4; animation-delay: 15s; }
      .flow-ack { stroke: #818cf8; animation-delay: 18s; }
      @keyframes flowDash {
        0%, 8% { stroke-dashoffset: 120; opacity: 0; }
        12%, 30% { stroke-dashoffset: 30; opacity: 0.85; }
        36%, 60% { stroke-dashoffset: 0; opacity: 0.3; }
        100% { stroke-dashoffset: -120; opacity: 0; }
      }
      .timeline-label { font-size: 13px; fill: #94a3b8; text-transform: uppercase; letter-spacing: 0.2em; }
      .timeline-pointer { transform: translate(-40px, 44px); animation: pointerMove 24s ease-in-out infinite; transform-origin: center; }
      .timeline-pointer circle { fill: #facc15; stroke: #fde68a; stroke-width: 3; }
      .timeline-pointer line { stroke: rgba(250,204,21,0.45); stroke-width: 2; stroke-linecap: round; }
      @keyframes pointerMove {
        0%, 11% { transform: translate(-40px, 44px); }
        12.5%, 23% { transform: translate(220px, 44px); }
        25%, 34% { transform: translate(480px, 44px); }
        37.5%, 46% { transform: translate(-40px, 140px); }
        50%, 59% { transform: translate(220px, 140px); }
        62.5%, 71% { transform: translate(480px, 140px); }
        75%, 84% { transform: translate(90px, 236px); }
        87.5%, 96% { transform: translate(350px, 236px); }
        100% { transform: translate(-40px, 44px); }
      }
      .step-tracker { transform: translate(0, 0); fill: rgba(250,204,21,0.08); stroke: rgba(250,204,21,0.35); stroke-width: 2; animation: trackerMove 24s ease-in-out infinite; }
      @keyframes trackerMove {
        0%, 11% { transform: translate(0, 0); opacity: 0.9; }
        12.5%, 23% { transform: translate(260px, 0); opacity: 0.9; }
        25%, 34% { transform: translate(520px, 0); opacity: 0.9; }
        37.5%, 46% { transform: translate(0, 96px); opacity: 0.9; }
        50%, 59% { transform: translate(260px, 96px); opacity: 0.9; }
        62.5%, 71% { transform: translate(520px, 96px); opacity: 0.9; }
        75%, 84% { transform: translate(130px, 192px); opacity: 0.9; }
        87.5%, 96% { transform: translate(390px, 192px); opacity: 0.9; }
        100% { transform: translate(0, 0); opacity: 0.9; }
      }
    </style>
  </defs>
  <rect fill="url(#bg)" x="0" y="0" width="960" height="540" rx="28" ry="28" />

  <text x="80" y="70" class="title">İki Node'lu can-cache veri yolculuğu</text>
  <text x="80" y="95" class="subtitle">İstemciden çıkan bir yazma isteği kümeye katılan ikinci node ile nasıl replike edilir?</text>

  <g transform="translate(90, 50)">
    <rect x="0" y="0" width="170" height="210" rx="22" ry="22" fill="#1e293b" opacity="0.7" stroke="#38bdf8" stroke-opacity="0.4" />
    <circle cx="85" cy="60" r="36" fill="url(#client)" />
    <text x="85" y="62" text-anchor="middle" class="node-label">İstemci</text>
    <text x="85" y="95" text-anchor="middle" fill="#fef9c3">SET foo ...</text>
  </g>

  <g transform="translate(360, 30)" class="node node-a">
    <rect x="0" y="0" width="180" height="250" rx="26" ry="26" fill="#172554" opacity="0.8" stroke="#38bdf8" stroke-opacity="0.45" />
    <circle cx="90" cy="60" r="34" fill="url(#node)" class="node-pulse" />
    <text x="90" y="65" text-anchor="middle" class="node-label">Node A</text>
    <text x="90" y="95" text-anchor="middle" fill="#bae6fd">Bootstrap edilmiş lider</text>
  </g>

  <g transform="translate(630, 30)" class="node node-b">
    <rect x="0" y="0" width="180" height="250" rx="26" ry="26" fill="#0f766e" opacity="0.35" stroke="#5eead4" stroke-opacity="0.4" />
    <circle cx="90" cy="60" r="34" fill="#14b8a6" class="node-pulse" />
    <text x="90" y="65" text-anchor="middle" class="node-label">Node B</text>
    <text x="90" y="95" text-anchor="middle" fill="#ccfbf1">Yeni katılan takipçi</text>
  </g>

  <path d="M198 160 C 300 110 360 110 460 150" class="flow flow-client" marker-end="url(#arrow)" />
  <path d="M470 150 Q 580 190 690 150" class="flow flow-replica" marker-end="url(#arrow)" />
  <path d="M700 190 Q 780 230 830 190" class="flow flow-ack" marker-end="url(#arrow)" />

  <g class="packet">
    <circle r="14" />
    <text x="0" y="-24" text-anchor="middle" font-size="12" fill="#fde68a">foo</text>
  </g>
  <text x="80" y="240" class="timeline-label">Yaşam döngüsü kareleri</text>
  <g transform="translate(80, 260)">
    <rect x="-12" y="-12" width="264" height="112" rx="24" ry="24" class="step-tracker" />
    <g class="timeline-pointer">
      <line x1="0" y1="0" x2="-24" y2="0" />
      <circle r="7" />
    </g>
    <g class="step step1" transform="translate(0, 0)">
      <rect x="0" y="0" width="240" height="88" rx="12" ry="12" fill="rgba(30,58,138,0.45)" />
      <text class="step-title">
        <tspan x="20" y="24">1. Node B kümeye</tspan>
        <tspan x="20" dy="18">merhaba der</tspan>
      </text>
      <text class="step-desc">
        <tspan x="20" y="52">Heartbeat algılanır,</tspan>
        <tspan x="20" dy="16">koordinasyon servisi</tspan>
        <tspan x="20" dy="16">node'u hash halkasına ekler.</tspan>
      </text>
    </g>
    <g class="step step2" transform="translate(260, 0)">
      <rect x="0" y="0" width="240" height="88" rx="12" ry="12" fill="rgba(2,132,199,0.35)" />
      <text class="step-title">
        <tspan x="20" y="24">2. Bootstrap</tspan>
        <tspan x="20" dy="18">senkronu</tspan>
      </text>
      <text class="step-desc">
        <tspan x="20" y="52">ReplicationServer Node B'ye</tspan>
        <tspan x="20" dy="16">snapshot ve ipuçlarını</tspan>
        <tspan x="20" dy="16">akıtarak belleğini doldurur.</tspan>
      </text>
    </g>
    <g class="step step3" transform="translate(520, 0)">
      <rect x="0" y="0" width="240" height="88" rx="12" ry="12" fill="rgba(15,118,110,0.35)" />
      <text class="step-title">
        <tspan x="20" y="24">3. İstemci isteği</tspan>
        <tspan x="20" dy="18">gelir</tspan>
      </text>
      <text class="step-desc">
        <tspan x="20" y="52">CanCachedServer protokol</tspan>
        <tspan x="20" dy="16">satırını ayrıştırır, ClusterClient</tspan>
        <tspan x="20" dy="16">için yazma çağrısı hazırlar.</tspan>
      </text>
    </g>
    <g class="step step4" transform="translate(0, 96)">
      <rect x="0" y="0" width="240" height="88" rx="12" ry="12" fill="rgba(22,101,52,0.35)" />
      <text class="step-title">
        <tspan x="20" y="24">4. Hash ve</tspan>
        <tspan x="20" dy="18">replikasyon hedefleri</tspan>
      </text>
      <text class="step-desc">
        <tspan x="20" y="52">Anahtar tutarlı halkada</tspan>
        <tspan x="20" dy="16">çözümlenir; quorum için Node A</tspan>
        <tspan x="20" dy="16">lider, Node B takipçi seçilir.</tspan>
      </text>
    </g>
    <g class="step step5" transform="translate(260, 96)">
      <rect x="0" y="0" width="240" height="88" rx="12" ry="12" fill="rgba(180,83,9,0.35)" />
      <text class="step-title">
        <tspan x="20" y="24">5. Node A lokalde</tspan>
        <tspan x="20" dy="18">yazar</tspan>
      </text>
      <text class="step-desc">
        <tspan x="20" y="52">CacheEngine segmente</tspan>
        <tspan x="20" dy="16">yazar, TTL kuyruğunu ve</tspan>
        <tspan x="20" dy="16">metrikleri günceller.</tspan>
      </text>
    </g>
    <g class="step step6" transform="translate(520, 96)">
      <rect x="0" y="0" width="240" height="88" rx="12" ry="12" fill="rgba(190,24,93,0.35)" />
      <text class="step-title">
        <tspan x="20" y="24">6. Node B'ye</tspan>
        <tspan x="20" dy="18">replika akışı</tspan>
      </text>
      <text class="step-desc">
        <tspan x="20" y="52">RemoteNode vekili komutu</tspan>
        <tspan x="20" dy="16">Node B ReplicationServer'a</tspan>
        <tspan x="20" dy="16">ileterek aynı kaydı yazar.</tspan>
      </text>
    </g>
    <g class="step step7" transform="translate(130, 192)">
      <rect x="0" y="0" width="240" height="88" rx="12" ry="12" fill="rgba(147,51,234,0.35)" />
      <text class="step-title">
        <tspan x="20" y="24">7. Quorum</tspan>
        <tspan x="20" dy="18">yanıtı</tspan>
      </text>
      <text class="step-desc">
        <tspan x="20" y="52">Yeterli ACK gelince</tspan>
        <tspan x="20" dy="16">ClusterClient "STORED"</tspan>
        <tspan x="20" dy="16">döner, istemci mutlu.</tspan>
      </text>
    </g>
    <g class="step step8" transform="translate(390, 192)">
      <rect x="0" y="0" width="240" height="88" rx="12" ry="12" fill="rgba(30,64,175,0.35)" />
      <text class="step-title">
        <tspan x="20" y="24">8. Arka plan</tspan>
        <tspan x="20" dy="18">bakımı</tspan>
      </text>
      <text class="step-desc">
        <tspan x="20" y="52">TTL temizleyicisi, hinted</tspan>
        <tspan x="20" dy="16">handoff ve anti-entropy</tspan>
        <tspan x="20" dy="16">döngüsü veriyi dengede tutar.</tspan>
      </text>
    </g>
  </g>
</svg>
